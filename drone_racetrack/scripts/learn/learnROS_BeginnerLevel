# *** 01 - Installing and Configuring Your ROS Environment ***

$ printenv | grep ROS

$ source /opt/ros/kinetic/setup.bash

$ mkdir -p ~/catkin_ws/src
$ cd ~/catkin_ws/
$ catkin_make
$ source devel/setup.bash
$ echo $ROS_PACKAGE_PATH


# *** 02 - Navigating the ROS Filesystem ***

$ rospack find [package_name]
$ roscd [locationname[/subdir]]
$ roscd log
$ rosls [locationname[/subdir]]


# *** 03 - Creating a ROS Package ***

$ cd ~/catkin_ws/src
# catkin_create_pkg <package_name> [depend1] [depend2] [depend3]
$ catkin_create_pkg beginner_tutorials std_msgs rospy roscpp 
$ cd ~/catkin_ws
$ catkin_make
$ . ~/catkin_ws/devel/setup.bash

$ rospack depends1 beginner_tutorials 
$ roscd beginner_tutorials
$ cat package.xml
$ rospack depends1 rospy
$ rospack depends beginner_tutorials

# Customizing the package.xml


# *** 04 - Building a ROS Package ***

# source /opt/ros/%YOUR_ROS_DISTRO%/setup.bash
$ source /opt/ros/kinetic/setup.bash             # For Kinetic for instance

# In a catkin workspace
$ catkin_make [make_targets] [-DCMAKE_VARIABLES=...]

# In a catkin workspace
$ catkin_make
$ catkin_make install  # (optionally)

# In a catkin workspace
$ catkin_make --source my_src
$ catkin_make install --source my_src  # (optionally)

$ cd ~/catkin_ws/
$ ls src
$ catkin_make


# *** 05 - Understanding ROS Nodes ***

# Nodes: A node is an executable that uses ROS to communicate with other nodes.
# Messages: ROS data type used when subscribing or publishing to a topic.
# Topics: Nodes can publish messages to a topic as well as subscribe to a topic to receive messages.
# Master: Name service for ROS (i.e. helps nodes find each other)
# rosout: ROS equivalent of stdout/stderr
# roscore: Master + rosout + parameter server (parameter server will be introduced later) 

$ roscore
# In a new terminal
$ rosnode list
$ rosnode info /rosout
# rosrun [package_name] [node_name]
$ rosrun turtlesim turtlesim_node
$ rosnode list
$ rosrun turtlesim turtlesim_node __name:=my_turtle
$ rosnode list
$ rosnode cleanup 
$ rosnode ping my_turtle


# *** 06 - Understanding ROS Topics ***

$ roscore
# In a new terminal
$ rosrun turtlesim turtlesim_node
# In a new terminal
$ rosrun turtlesim turtle_teleop_key
# In a new terminal
$ rosrun rqt_graph rqt_graph

$ rostopic -h
# rostopic echo [topic]
$ rostopic echo /turtle1/cmd_vel

$ rostopic list -h
$ rostopic list -v

# rostopic type [topic]
$ rostopic type /turtle1/cmd_vel
$ rosmsg show geometry_msgs/Twist

# rostopic pub [topic] [msg_type] [args]
# This option (dash-one) causes rostopic to only publish one message then exit.
# (This option (double-dash) tells the option parser that none of the following arguments is an option.
# This is required in cases where your arguments have a leading dash -, like negative numbers.)
# YAML syntax: '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'
$ rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'

# Rate of 1 Hz: -r 1
$ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, -1.8]'

$ rostopic echo /turtle1/pose

# rostopic hz [topic]
$ rostopic hz /turtle1/pose

$ rosrun rqt_plot rqt_plot


# *** 07 - Understanding ROS Services and Parameters ***

# Services: Allow nodes to send a request and receive a response.

# rosservice list         print information about active services
# rosservice call         call the service with the provided args
# rosservice type         print service type
# rosservice find         find services by service type
# rosservice uri          print service ROSRPC uri

$ rosservice list

# rosservice type [service]
$ rosservice type /clear

# rosservice call [service] [args]
$ rosservice call /clear

$ rosservice type /spawn | rossrv show

$ rosservice call /spawn 2 2 0.2 ""

# Rosparam: Allows you to store and manipulate data on the ROS Parameter Server.
# The Parameter Server can store integers, floats, boolean, dictionaries, and lists. 
# rosparam uses the YAML markup language for syntax.
# In simple cases, YAML looks very natural:
# 1 is an integer, 1.0 is a float, one is a string, true is a boolean,
# [1, 2, 3] is a list of integers, and {a: b, c: d} is a dictionary.

# rosparam set            set parameter
# rosparam get            get parameter
# rosparam load           load parameters from file
# rosparam dump           dump parameters to file
# rosparam delete         delete parameter
# rosparam list           list parameter names

$ rosparam list

# rosparam set [param_name]
# rosparam get [param_name]
$ rosparam set /background_r 150
$ rosservice call /clear
$ rosparam get /background_g 
$ rosparam get /

# rosparam dump [file_name] [namespace]
# rosparam load [file_name] [namespace]

$ rosparam dump params.yaml
# You can even load these yaml files into new namespaces, e.g. copy:
$ rosparam load params.yaml copy
$ rosparam get /copy/background_b


# *** 08 - Using rqt_console and roslaunch ***

$ rosrun rqt_console rqt_console
$ rosrun rqt_logger_level rqt_logger_level
$ rosrun turtlesim turtlesim_node

# roslaunch [package] [filename.launch]
$ roscd beginner_tutorials # Or
$ cd ~/catkin_ws
$ source devel/setup.bash
$ roscd beginner_tutorials

$ mkdir launch
$ cd launch

# Create turtlemimic.launch
# --------------------------
# <launch>
# 
#   <group ns="turtlesim1">
#     <node pkg="turtlesim" name="sim" type="turtlesim_node"/>
#   </group>
# 
#   <group ns="turtlesim2">
#     <node pkg="turtlesim" name="sim" type="turtlesim_node"/>
#   </group>
# 
#   <node pkg="turtlesim" name="mimic" type="mimic">
#     <remap from="input" to="turtlesim1/turtle1"/>
#     <remap from="output" to="turtlesim2/turtle1"/>
#   </node>
# 
# </launch>

$ roslaunch beginner_tutorials turtlemimic.launch
$ rqt_graph


# *** 09 - Using rosed to edit files in ROS ***

# rosed [package_name] [filename]
$ rosed roscpp Logger.msg

# rosed [package_name] <tab><tab>
$ rosed roscpp <tab><tab>


# *** 10 - Creating a ROS msg and srv ***

# msg: msg files are simple text files that describe the fields of a ROS message. 
# They are used to generate source code for messages in different languages.
#
# Available field types:
# int8, int16, int32, int64 (plus uint*)
# float32, float64
# string
# time, duration
# other msg files
# variable-length array[] and fixed-length array[C] 
# Headerthe (header contains a timestamp and coordinate frame information)
#
# Example:
# Header header
# string child_frame_id
# geometry_msgs/PoseWithCovariance pose
# geometry_msgs/TwistWithCovariance twist

# srv: an srv file describes a service. It is composed of two parts: a request and a response.
#
# Example:
# int64 A
# int64 B
# ---
# int64 Sum

$ roscd beginner_tutorials
$ mkdir msg
$ echo "int64 num" > msg/Num.msg

# Add to package.xml
# <build_depend>message_generation</build_depend>
# <exec_depend>message_runtime</exec_depend>

# CMakeLists.txt
# 1) Add message_generation as dependency to the find_package call
#       find_package(catkin REQUIRED COMPONENTS
#          roscpp
#          rospy
#          std_msgs
#          message_generation
#       )
# 2) Export the message runtime dependency
#       catkin_package(
#         ...
#         CATKIN_DEPENDS message_runtime ...
#         ...)
# 3) Uncomment add_message_files call and edit to
#       add_message_files(
#         FILES
#         Num.msg
#       )
# 4) Uncomment generate_messages call
#       generate_messages(
#         DEPENDENCIES
#         std_msgs
#       )

# rosmsg show [message type]
$ rosmsg show beginner_tutorials/Num
$ rosmsg show Num

$ roscd beginner_tutorials
$ mkdir srv

# roscp [package_name] [file_to_copy_path] [copy_path]
$ roscp rospy_tutorials AddTwoInts.srv srv/AddTwoInts.srv

# (package.xml, CMakeLists.txt) -> Same steps as for message but, step 3)
#       add_service_files(
#         FILES
#         AddTwoInts.srv
#       )

# rossrv show <service type>
$ rossrv show beginner_tutorials/AddTwoInts
$ rossrv show AddTwoInts

# In your catkin workspace
$ roscd beginner_tutorials
$ cd ../..
$ catkin_make install
$ cd -


# *** 11 - Writing a Simple Publisher and Subscriber (C++) ***


# *** 12 - Writing a Simple Publisher and Subscriber (Python) ***

$ roscd beginner_tutorials
$ mkdir scripts
$ cd scripts
$ wget https://raw.github.com/ros/ros_tutorials/kinetic-devel/rospy_tutorials/001_talker_listener/talker.py
$ chmod +x talker.py
$ rosed beginner_tutorials talker.py

$ roscd beginner_tutorials/scripts/
$ wget https://raw.github.com/ros/ros_tutorials/kinetic-devel/rospy_tutorials/001_talker_listener/listener.py
$ chmod +x listener.py

$ cd ~/catkin_ws
$ catkin_make


# *** 13 - Examining the Simple Publisher and Subscriber ***

$ roscore
# In your catkin workspace
$ cd ~/catkin_ws
$ source ./devel/setup.bash
$ rosrun beginner_tutorials talker      (C++)
$ rosrun beginner_tutorials talker.py   (Python) 
$ rosrun beginner_tutorials listener     (C++)
$ rosrun beginner_tutorials listener.py  (Python) 


# *** 14 - Writing a Simple Service and Client (C++) ***


# *** 15 - Writing a Simple Service and Client (Python) ***

$ roscd beginner_tutorials

# Create scripts/add_two_ints_server.py
# #!/usr/bin/env python
# 
# from beginner_tutorials.srv import *
# import rospy
# 
# def handle_add_two_ints(req):
#     print "Returning [%s + %s = %s]"%(req.a, req.b, (req.a + req.b))
#     return AddTwoIntsResponse(req.a + req.b)
# 
# def add_two_ints_server():
#     rospy.init_node('add_two_ints_server')
#     s = rospy.Service('add_two_ints', AddTwoInts, handle_add_two_ints)
#     print "Ready to add two ints."
#     rospy.spin()
# 
# if __name__ == "__main__":
#     add_two_ints_server()

chmod +x scripts/add_two_ints_server.py

# Create scripts/add_two_ints_client.py
# #!/usr/bin/env python
# 
# import sys
# import rospy
# from beginner_tutorials.srv import *
# 
# def add_two_ints_client(x, y):
#     rospy.wait_for_service('add_two_ints')
#     try:
#         add_two_ints = rospy.ServiceProxy('add_two_ints', AddTwoInts)
#         resp1 = add_two_ints(x, y)
#         return resp1.sum
#     except rospy.ServiceException, e:
#         print "Service call failed: %s"%e
# 
# def usage():
#     return "%s [x y]"%sys.argv[0]
# 
# if __name__ == "__main__":
#     if len(sys.argv) == 3:
#         x = int(sys.argv[1])
#         y = int(sys.argv[2])
#     else:
#         print usage()
#         sys.exit(1)
#     print "Requesting %s+%s"%(x, y)
#     print "%s + %s = %s"%(x, y, add_two_ints_client(x, y))

$ chmod +x scripts/add_two_ints_client.py

# In your catkin workspace
$ cd ~/catkin_ws
$ catkin_make


# *** 16 - Examining the Simple Service and Client ***

$ rosrun beginner_tutorials add_two_ints_server     (C++)
$ rosrun beginner_tutorials add_two_ints_server.py  (Python) 

$ rosrun beginner_tutorials add_two_ints_client 1 3     (C++)
$ rosrun beginner_tutorials add_two_ints_client.py 1 3  (Python) 


# *** 17 - Recording and playing back data ***

# Terminal 1:
$ roscore

# Terminal 2:
$ rosrun turtlesim turtlesim_node 

# Terminal 3:
$ rosrun turtlesim turtle_teleop_key

$ rostopic list -v

# Terminal 4:
$ mkdir ~/bagfiles
$ cd ~/bagfiles
$ rosbag record -a

$ rosbag info <your bagfile>

$ rosbag play <your bagfile>

$ rosrun turtlesim turtlesim_node 
$ rosrun turtlesim turtle_teleop_key

$ rosbag record -O subset /turtle1/cmd_vel /turtle1/pose


# *** 18 - Getting started with roswtf ***

# Roscore should not run
$ ps -ef | grep -i rosmaster

$ roscd rosmaster
$ roswtf


# *** 19 - Navigating the ROS wiki ***

# *** 20 - Where Next? ***

# LOOK UP LATER.


好了